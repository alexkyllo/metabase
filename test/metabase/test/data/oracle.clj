(ns metabase.test.data.oracle
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.string :as s]
            [environ.core :refer [env]]
            [korma.core :as k]
            (metabase.test.data [generic-sql :as generic]
                                [interface :as i])
            [metabase.util :as u])
  (:import metabase.driver.oracle.OracleDriver))

(defn- get-db-env-var
  " Look up the relevant connection param from corresponding env var or throw an exception if it's not set.

     (get-db-env-var :user) ; Look up `MB_ORACLE_USER`"
  [env-var & [default]]
  (or (env (keyword (format "mb-oracle-%s" (name env-var))))
      default
      (throw (Exception. (format "In order to test Oracle, you must specify the env var MB_ORACLE_%s."
                                 (s/upper-case (name env-var)))))))

(def database->connection-details
  (constantly
   {:host         (get-db-env-var :host "oracle-dev-norcal.cawvfhnz9drs.us-west-1.rds.amazonaws.com")
    :port         (Integer/parseInt (get-db-env-var :port "1521"))
    :user         (get-db-env-var :user "cam")
    :password     (get-db-env-var :password "4Cr4QnU4yHM3zQWQ")
    :sid          "ORCL"
    :short-lived? false}))

(def ^:private ^:const field-base-type->sql-type
  {:BigIntegerField "NUMBER(*,0)"
   :BooleanField    "NUMBER(1)"
   :CharField       "VARCHAR2(254)"
   :DateField       "DATE"
   :DateTimeField   "TIMESTAMP WITH TIME ZONE"
   :DecimalField    "DECIMAL"
   :FloatField      "BINARY_FLOAT"
   :IntegerField    "INTEGER"
   :TextField       "TEXT"})

(defn- drop-table-if-exists-sql [_ {:keys [database-name]} {:keys [table-name]}]
  (format "BEGIN
             EXECUTE IMMEDIATE 'DROP TABLE \"%s\" CASCADE CONSTRAINTS'⅋
           EXCEPTION
             WHEN OTHERS THEN
               IF SQLCODE != -942 THEN
                 RAISE⅋
               END IF⅋
           END⅋"
          table-name))

(extend OracleDriver
  generic/IGenericSQLDatasetLoader
  (merge generic/DefaultsMixin
         {:create-db-sql             (constantly nil)
          :drop-db-if-exists-sql     (constantly nil)
          :drop-table-if-exists-sql  drop-table-if-exists-sql
          :execute-sql!              generic/sequentially-execute-sql!
          :field-base-type->sql-type (fn [_ base-type] (field-base-type->sql-type base-type))
          :load-data!                generic/load-data-one-at-a-time-parallel!
          :pk-sql-type               (constantly "INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL")}) ; LOL

  i/IDatasetLoader
  (merge generic/IDatasetLoaderMixin
         {:database->connection-details database->connection-details
          :engine                       (constantly :oracle)}))

(defn- jdbc-spec []
  (metabase.driver.generic-sql/db->jdbc-connection-spec (OracleDriver.) (database->connection-details nil nil nil)))

(defn- execute! [& args]
  (try (jdbc/execute! (jdbc-spec) (vec args))
       (catch java.sql.SQLException e
         (jdbc/print-sql-exception-chain e)
         (throw e))))

(defn- query [& args]
  (try (jdbc/query (jdbc-spec) (vec args))
       (catch java.sql.SQLException e
         (jdbc/print-sql-exception-chain e)
         (throw e))))

(defn a []
  (query "SELECT TRUNC(SYSDATE, 'mi') d,
                                          CAST(SYSDATE AS TIMESTAMP) t1,
                                          CAST(SYSDATE AS TIMESTAMP WITH TIME ZONE) t2,
                                          EXTRACT(hour FROM CAST(SYSDATE AS TIMESTAMP)) x,
                                          EXTRACT(hour FROM CAST(SYSDATE AS TIMESTAMP WITH TIME ZONE)) x2
                                   FROM DUAL"))
